import { createCourtReservationsModule } from './reservations.js';
import { createCourtAvailabilityModule } from './availability.js';

export function createCourtsModule(deps = {}) {
  const {
    state,
    request,
    showGlobalMessage,
    setStatusMessage,
    formatDate,
    formatDateInput,
    formatTime,
    formatTimeRangeLabel,
    formatTimeInputValue,
    formatCourtDisplay,
    combineDateAndTime,
    roundDateUpToInterval,
    addMinutes,
    startOfDay,
    normalizeId,
    getPlayerDisplayName,
    getClubCourtNames,
    hasCourtManagementAccess,
    openModal,
    closeModal,
    buildMatchTeams,
    formatDateTimeLocal,
    courtReservationList,
    courtReservationEmpty,
    courtReservationForm,
    courtReservationDateInput,
    courtReservationTimeInput,
    courtReservationDurationSelect,
    courtReservationCourtSelect,
    courtReservationNotesInput,
    courtReservationStatus,
    courtReservationSubmit,
    courtAvailabilityDateInput,
    courtAvailabilityList,
    courtAvailabilityEmpty,
    courtAdminDateInput,
    courtAdminSchedule,
    courtAdminEmpty,
    courtAdminStatus,
    courtBlockForm,
    courtBlockContextSelect,
    courtBlockEntitySelect,
    courtBlockCourtsSelect,
    courtBlockStartInput,
    courtBlockEndInput,
    courtBlockSubmit,
    courtBlockStatus,
    courtBlocksList,
    courtBlocksEmpty,
    playerCourtCalendarStatus,
    COURT_RESERVATION_DEFAULT_DURATION,
    COURT_RESERVATION_FIRST_SLOT_MINUTE,
    COURT_RESERVATION_LAST_SLOT_END_MINUTE,
    CALENDAR_TIME_SLOT_MINUTES,
  } = deps;

  const reservationsModule = createCourtReservationsModule({
    state,
    request,
    showGlobalMessage,
    setStatusMessage,
    formatDate,
    formatDateInput,
    formatTime,
    formatTimeRangeLabel,
    formatTimeInputValue,
    formatCourtDisplay,
    combineDateAndTime,
    roundDateUpToInterval,
    addMinutes,
    startOfDay,
    normalizeId,
    getPlayerDisplayName,
    getClubCourtNames,
    hasCourtManagementAccess,
    openModal,
    closeModal,
    buildMatchTeams,
    courtReservationList,
    courtReservationEmpty,
    courtReservationForm,
    courtReservationDateInput,
    courtReservationTimeInput,
    courtReservationDurationSelect,
    courtReservationCourtSelect,
    courtReservationNotesInput,
    courtReservationStatus,
    courtReservationSubmit,
    COURT_RESERVATION_DEFAULT_DURATION,
    COURT_RESERVATION_FIRST_SLOT_MINUTE,
    COURT_RESERVATION_LAST_SLOT_END_MINUTE,
  });

  const availabilityModule = createCourtAvailabilityModule({
    state,
    request,
    showGlobalMessage,
    setStatusMessage,
    hasCourtManagementAccess,
    formatDateInput,
    formatTimeRangeLabel,
    formatDateTimeLocal,
    roundDateUpToInterval,
    addMinutes,
    getClubCourtNames,
    courtAvailabilityDateInput,
    courtAvailabilityList,
    courtAvailabilityEmpty,
    courtAdminDateInput,
    courtAdminSchedule,
    courtAdminEmpty,
    courtAdminStatus,
    courtBlockForm,
    courtBlockContextSelect,
    courtBlockEntitySelect,
    courtBlockCourtsSelect,
    courtBlockStartInput,
    courtBlockEndInput,
    courtBlockSubmit,
    courtBlockStatus,
    courtBlocksList,
    courtBlocksEmpty,
    playerCourtCalendarStatus,
    COURT_RESERVATION_DEFAULT_DURATION,
    CALENDAR_TIME_SLOT_MINUTES,
    getReservationParticipants: reservationsModule.getReservationParticipants,
    getReservationContext: reservationsModule.getReservationContext,
    getReservationContextLabel: reservationsModule.getReservationContextLabel,
    getPlayerDisplayName,
  });

  reservationsModule.registerCourtDataReloaders({
    refreshAvailability: availabilityModule.refreshCourtAvailability,
    loadAdminData: availabilityModule.loadAdminCourtData,
  });

  function registerCalendarHooks({ renderPlayerCourtCalendar, loadCourtCalendarData } = {}) {
    availabilityModule.registerCalendarHooks({ renderPlayerCourtCalendar, loadCourtCalendarData });
    reservationsModule.registerCourtDataReloaders({
      refreshAvailability: availabilityModule.refreshCourtAvailability,
      loadAdminData: availabilityModule.loadAdminCourtData,
      loadCalendarData: loadCourtCalendarData,
    });
  }

  return {
    ...availabilityModule,
    ...reservationsModule,
    registerCalendarHooks,
  };
}
