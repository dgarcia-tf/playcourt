import { createCalendarEventsModule } from './features/calendar/events.js';
import { createCalendarModule } from './features/calendar/calendar.js';
import { createChatModule } from './features/chat/chat.js';
import { createCourtsModule } from './features/courts/courts.js';
import { createLeaguesModule } from './features/leagues/leagues.js';
import { createLeagueCategoriesModule } from './features/leagues/categories.js';
import { createLeagueRankingsModule } from './features/leagues/rankings.js';
import { createMatchesModule } from './features/matches/matches.js';
import { createMatchProposalsModule } from './features/matches/proposals.js';


const calendarEventsModule = createCalendarEventsModule({
  startOfDay,
  addDays,
  addMinutes,
  formatTimeRangeLabel,
  formatCourtDisplay,
  formatReservationParticipantsLabel,
  getReservationMatch,
  formatMatchPlayersLabel,
  getReservationContextLabel,
  normalizeId,
  getPlayerDisplayName,
  normalizeCourtKey,
  getClubCourtNames,
  formatDateInput,
  formatDateOnly,
  formatDayLabel,
  getReservationSlotStartsForDate,
  getReservationSlotEnd,
  formatReservationSlotLabel,
  openReservationEditorFromCalendar,
  bindCalendarEvent,
  openTournamentMatchScheduleModal,
  parseDateSafe,
  COURT_RESERVATION_DEFAULT_DURATION,
  getSelectedCourtCalendarDate: () => state.courtCalendarDate,
});

const {
  buildPlayerCourtCalendarEvents,
  getCourtCalendarCourts,
  createCourtCalendarEvent,
  getCourtCalendarEventBounds,
  isCourtCalendarEventForCourt,
  doesCourtCalendarEventOverlapSlot,
} = calendarEventsModule;

const calendarModule = createCalendarModule({
  state,
  playerCourtCalendarContainer,
  playerCourtCalendarLabel,
  playerCourtCalendarDateInput,
  courtCalendarContainer,
  courtCalendarLabel,
  courtCalendarStatus,
  courtCalendarViewButtons,
  courtBlocksList,
  courtBlocksEmpty,
  courtAdminDateInput,
  setStatusMessage,
  formatDateInput,
  formatDayLabel,
  formatMonthLabel,
  formatDateRangeLabel,
  formatTimeRangeLabel,
  startOfDay,
  startOfMonth,
  endOfMonth,
  addDays,
  hasCourtManagementAccess,
  setCalendarViewButtonState,
  request,
  formatReservationParticipantsLabel,
  getReservationMatch,
  getPlayerDisplayName,
  getReservationContextLabel,
  normalizeId,
  ensureCourtBlockRangeDefaults,
  showSection,
  refreshCourtAvailability,
  calendarEvents: calendarEventsModule,
});

const {
  renderPlayerCourtCalendar,
  renderCourtCalendar,
  setCourtCalendarViewMode,
  resetCourtCalendarView,
  renderCourtBlocksList,
  loadCourtCalendarData,
  handleCourtCalendarDaySelection,
} = calendarModule;
const chatModule = createChatModule({
  state,
  noticeLastSeenPrefix: NOTICE_LAST_SEEN_PREFIX,
  noticesMenuBadge,
  generalChatMessagesList,
  generalChatForm,
  generalChatInput,
  generalChatToolbar,
  generalChatEditor,
  generalChatAttachmentInput,
  generalChatImageInput,
  generalChatAttachments,
  generalChatAttachmentsList,
  request,
  sanitizeNoticeHtml,
  readFileAsDataUrl,
  showGlobalMessage,
  applyRichTextCommand,
  isAdmin,
  normalizeId,
  formatRoles,
  formatChatTimestamp,
  NOTICE_INLINE_IMAGE_DATA_URL_PATTERN,
  NOTICE_INLINE_IMAGE_SRC_REGEX,
  MAX_INLINE_NOTICE_IMAGE_SIZE,
  MAX_TOTAL_INLINE_NOTICE_IMAGE_SIZE,
  MAX_NOTICE_RICH_CONTENT_LENGTH,
  MAX_NOTICE_RICH_CONTENT_WITH_IMAGES,
  MAX_NOTICE_ATTACHMENTS,
  MAX_NOTICE_ATTACHMENT_SIZE,
});

const {
  syncNoticeBoardState,
  updateNoticesMenuBadge,
  handleNoticeToolbarClick,
  handleNoticeAttachmentChange,
  handleNoticeImageSelection,
  removeNoticeAttachment,
  handleNoticeSubmit,
  loadGeneralChat,
} = chatModule;
generalChatForm?.addEventListener('submit', handleNoticeSubmit);

const courtsModule = createCourtsModule({
  state,
  request,
  showGlobalMessage,
  setStatusMessage,
  formatDate,
  formatDateInput,
  formatTime,
  formatTimeRangeLabel,
  formatTimeInputValue,
  formatCourtDisplay,
  combineDateAndTime,
  roundDateUpToInterval,
  addMinutes,
  startOfDay,
  normalizeId,
  getPlayerDisplayName,
  getClubCourtNames,
  hasCourtManagementAccess,
  openModal,
  closeModal,
  buildMatchTeams,
  formatDateTimeLocal,
  courtReservationList,
  courtReservationEmpty,
  courtReservationForm,
  courtReservationDateInput,
  courtReservationTimeInput,
  courtReservationDurationSelect,
  courtReservationCourtSelect,
  courtReservationNotesInput,
  courtReservationStatus,
  courtReservationSubmit,
  courtAvailabilityDateInput,
  courtAvailabilityList,
  courtAvailabilityEmpty,
  courtAdminDateInput,
  courtAdminSchedule,
  courtAdminEmpty,
  courtAdminStatus,
  courtBlockForm,
  courtBlockContextSelect,
  courtBlockEntitySelect,
  courtBlockCourtsSelect,
  courtBlockStartInput,
  courtBlockEndInput,
  courtBlockSubmit,
  courtBlockStatus,
  courtBlocksList,
  courtBlocksEmpty,
  playerCourtCalendarStatus,
  COURT_RESERVATION_DEFAULT_DURATION,
  COURT_RESERVATION_FIRST_SLOT_MINUTE,
  COURT_RESERVATION_LAST_SLOT_END_MINUTE,
  CALENDAR_TIME_SLOT_MINUTES,
});

const {
  getReservationSlotStartsForDate,
  getReservationSlotEnd,
  formatReservationSlotLabel,
  isValidReservationSlotStart,
  getReservationMatch,
  getReservationContext,
  getReservationContextLabel,
  getReservationParticipants,
  formatReservationParticipantsLabel,
  formatMatchPlayersLabel,
  formatReservationPlayerOptionLabel,
  getSelectableReservationPlayers,
  ensureReservationPlayersLoaded,
  renderCourtReservations,
  populateCourtReservationCourts,
  populateCourtReservationTimeOptions,
  resetCourtReservationForm,
  openReservationEditorFromCalendar,
  cancelCourtReservation,
  loadPlayerCourtData,
  populateCourtBlockCourts,
  populateCourtBlockEntities,
  setCourtBlockDefaultRange,
  ensureCourtBlockRangeDefaults,
  renderCourtAvailability,
  renderCourtAdminSchedule,
  deleteCourtBlock,
  refreshCourtAvailability,
  loadAdminCourtData,
  registerCalendarHooks: registerCourtCalendarHooks,
} = courtsModule;
registerCourtCalendarHooks({ renderPlayerCourtCalendar, loadCourtCalendarData });
async 
async  = {}
async 
async  = {}) {
async ) {
async  = {}) {


const {
  ensureRankingFilters,
  ensureCategoryFilters,
  ensureLeaguePlayerFilters,
  ensureLeaguePaymentFilters,
  leagueHasEnrollmentFee,
  getLeaguesWithEnrollmentFee,
  formatLeagueOptionLabel,
  compareLeaguesByHistory,
  getLeagueById,
  getLeagueCategories,
  getLeagueIdForCategory,
  invalidateLeaguePaymentsByCategory,
  pruneLeagueCaches,
} = createLeaguesModule({ state, normalizeId });

const {
  updateCategoryControlsAvailability,
  updateCategoryFilterControls,
  renderCategories,
  submitCategoryFormData,
  renderAdminCategoryList,
  resetAdminCategoryForm,
  setAdminCategoryEditing,
  openCategoryModal,
} = createLeagueCategoriesModule({
  state,
  request,
  loadAllData,
  ensureCategoryFilters,
  formatLeagueOptionLabel,
  hasActiveLeagues,
  isAdmin,
  normalizeId,
  renderNotifications,
  categoriesList,
  categoryLeagueFilter,
  categoryCreateButton,
  getCategoryColor,
  applyCategoryColorStyles,
  createCategoryColorIndicator,
  translateGender,
  formatDate,
  formatCurrencyValue,
  resolveLeague,
  LEAGUE_STATUS_LABELS,
  CATEGORY_STATUS_LABELS,
  DEFAULT_CATEGORY_COLOR,
  DEFAULT_CATEGORY_MATCH_FORMAT,
  CATEGORY_SKILL_LEVEL_OPTIONS,
  CATEGORY_MATCH_FORMAT_OPTIONS,
  renderCategoryColorField,
  openModal,
  closeModal,
  adminCategoryList,
  adminCategoryForm,
  adminCategoryCancel,
  formatDateInput,
  setStatusMessage,
  resolveCategoryColor,
});

const leagueRankingsModule = createLeagueRankingsModule({
  state,
  request,
  ensureRankingFilters,
  getCategoryColor,
  createCategoryColorIndicator,
  translateGender,
  formatSkillLevelLabel,
  CATEGORY_STATUS_LABELS,
  resolveLeague,
  buildPlayerCell,
  buildPlayerCellMarkup,
  createMovementBadge,
  getPodiumEmoji,
  normalizeId,
  isAdmin,
  rankingCategoryList,
  rankingEmpty,
  rankingStatus,
  rankingLeagueFilter,
  setStatusMessage,
  showGlobalMessage,
  getLeagueCategories,
  getLeagueIdForCategory,
  formatLeagueOptionLabel,
  openModal,
  closeModal,
  escapeHtml,
});
const {
  setRankingStatusMessage,
  renderRankingSections,
  refreshAllRankings,
  openRankingPrintModal,
  updateRankingFilterControls,
} = leagueRankingsModule;
const matchProposalsModule = createMatchProposalsModule({
  request,
  showGlobalMessage,
  loadAllData,
  createMatchScheduleSlotPicker,
  getClubMatchScheduleTemplates,
  roundDateUpToInterval,
  formatDateInput,
  formatTimeInputValue,
  isValidReservationSlotStart,
  CALENDAR_TIME_SLOT_MINUTES,
});
const {
  openProposalForm,
  closeProposalForm,
  hasActiveProposalForm,
  attachActiveProposalForm,
} = matchProposalsModule;
const matchesModule = createMatchesModule({
  state,
  MATCHES_PER_PAGE,
  UNCATEGORIZED_CATEGORY_KEY,
  UNCATEGORIZED_CATEGORY_LABEL,
  MATCH_CALENDAR_DEFAULT_DURATION_MINUTES,
  STATUS_LABELS,
  upcomingList,
  pendingApprovalsList,
  completedMatchesList,
  myMatchesList,
  getCategoryColor,
  createCategoryColorIndicator,
  applyCategoryColorStyles,
  applyCategoryTagColor,
  formatDate,
  getExpirationWarningMessage,
  getMatchExpirationDate,
  formatExpirationDeadline,
  getPlayerDisplayName,
  formatMatchScore,
  createResultScoreboard,
  isAdmin,
  normalizeId,
  getResultConfirmation,
  updateMatchesMenuBadge,
  matchProposals: {
    closeProposalForm,
    hasActiveProposalForm,
    attachActiveProposalForm,
  },
});
const {
  renderMatches,
  renderMyMatches,
  resetAllMatchPagination,
  handleMatchPagination,
} = matchesModule;
