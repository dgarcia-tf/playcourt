import { createCalendarEventsModule } from './features/calendar/events.js';
import { createCalendarModule } from './features/calendar/calendar.js';
import { createChatModule } from './features/chat/chat.js';


const calendarEventsModule = createCalendarEventsModule({
  startOfDay,
  addDays,
  addMinutes,
  formatTimeRangeLabel,
  formatCourtDisplay,
  formatReservationParticipantsLabel,
  getReservationMatch,
  formatMatchPlayersLabel,
  getReservationContextLabel,
  normalizeId,
  getPlayerDisplayName,
  normalizeCourtKey,
  getClubCourtNames,
  formatDateInput,
  formatDateOnly,
  formatDayLabel,
  getReservationSlotStartsForDate,
  getReservationSlotEnd,
  formatReservationSlotLabel,
  openReservationEditorFromCalendar,
  bindCalendarEvent,
  openTournamentMatchScheduleModal,
  parseDateSafe,
  COURT_RESERVATION_DEFAULT_DURATION,
  getSelectedCourtCalendarDate: () => state.courtCalendarDate,
});

const {
  buildPlayerCourtCalendarEvents,
  getCourtCalendarCourts,
  createCourtCalendarEvent,
  getCourtCalendarEventBounds,
  isCourtCalendarEventForCourt,
  doesCourtCalendarEventOverlapSlot,
} = calendarEventsModule;

const calendarModule = createCalendarModule({
  state,
  playerCourtCalendarContainer,
  playerCourtCalendarLabel,
  playerCourtCalendarDateInput,
  courtCalendarContainer,
  courtCalendarLabel,
  courtCalendarStatus,
  courtCalendarViewButtons,
  courtBlocksList,
  courtBlocksEmpty,
  courtAdminDateInput,
  setStatusMessage,
  formatDateInput,
  formatDayLabel,
  formatMonthLabel,
  formatDateRangeLabel,
  formatTimeRangeLabel,
  startOfDay,
  startOfMonth,
  endOfMonth,
  addDays,
  hasCourtManagementAccess,
  setCalendarViewButtonState,
  request,
  formatReservationParticipantsLabel,
  getReservationMatch,
  getPlayerDisplayName,
  getReservationContextLabel,
  normalizeId,
  ensureCourtBlockRangeDefaults,
  showSection,
  refreshCourtAvailability,
  calendarEvents: calendarEventsModule,
});

const {
  renderPlayerCourtCalendar,
  renderCourtCalendar,
  setCourtCalendarViewMode,
  resetCourtCalendarView,
  renderCourtBlocksList,
  loadCourtCalendarData,
  handleCourtCalendarDaySelection,
} = calendarModule;
const chatModule = createChatModule({
  state,
  noticeLastSeenPrefix: NOTICE_LAST_SEEN_PREFIX,
  noticesMenuBadge,
  generalChatMessagesList,
  generalChatForm,
  generalChatInput,
  generalChatToolbar,
  generalChatEditor,
  generalChatAttachmentInput,
  generalChatImageInput,
  generalChatAttachments,
  generalChatAttachmentsList,
  request,
  sanitizeNoticeHtml,
  readFileAsDataUrl,
  showGlobalMessage,
  applyRichTextCommand,
  isAdmin,
  normalizeId,
  formatRoles,
  formatChatTimestamp,
  NOTICE_INLINE_IMAGE_DATA_URL_PATTERN,
  NOTICE_INLINE_IMAGE_SRC_REGEX,
  MAX_INLINE_NOTICE_IMAGE_SIZE,
  MAX_TOTAL_INLINE_NOTICE_IMAGE_SIZE,
  MAX_NOTICE_RICH_CONTENT_LENGTH,
  MAX_NOTICE_RICH_CONTENT_WITH_IMAGES,
  MAX_NOTICE_ATTACHMENTS,
  MAX_NOTICE_ATTACHMENT_SIZE,
});

const {
  syncNoticeBoardState,
  updateNoticesMenuBadge,
  handleNoticeToolbarClick,
  handleNoticeAttachmentChange,
  handleNoticeImageSelection,
  removeNoticeAttachment,
  handleNoticeSubmit,
  loadGeneralChat,
} = chatModule;
generalChatForm?.addEventListener('submit', handleNoticeSubmit);
