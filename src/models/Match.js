const mongoose = require('mongoose');

const confirmationSchema = new mongoose.Schema(
  {
    status: {
      type: String,
      enum: ['pendiente', 'aprobado', 'rechazado'],
      default: 'pendiente',
    },
    respondedAt: {
      type: Date,
    },
  },
  { _id: false }
);

const matchSchema = new mongoose.Schema(
  {
    category: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Category',
      required: true,
    },
    league: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'League',
    },
    season: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Season',
    },
    players: [
      {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true,
      },
    ],
    scheduledAt: {
      type: Date,
    },
    court: {
      type: String,
      trim: true,
    },
    status: {
      type: String,
      enum: ['pendiente', 'propuesto', 'programado', 'revision', 'completado', 'caducado'],
      default: 'pendiente',
    },
    expiresAt: {
      type: Date,
    },
    proposal: {
      requestedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
      },
      requestedTo: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
      },
      proposedFor: {
        type: Date,
      },
      message: {
        type: String,
        trim: true,
      },
      requestedAt: {
        type: Date,
      },
      respondedAt: {
        type: Date,
      },
      status: {
        type: String,
        enum: ['pendiente', 'aceptada', 'rechazada'],
        default: 'pendiente',
      },
    },
    result: {
      winner: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
      },
      sets: {
        type: [
          {
            number: {
              type: Number,
              min: 1,
              required: true,
            },
            scores: {
              type: Map,
              of: Number,
              default: () => ({}),
            },
            tieBreak: {
              type: Boolean,
              default: false,
            },
          },
        ],
        default: undefined,
      },
      scores: {
        type: Map,
        of: Number,
        default: {},
      },
      notes: {
        type: String,
        trim: true,
      },
      reportedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
      },
      reportedAt: {
        type: Date,
      },
      status: {
        type: String,
        enum: ['pendiente', 'en_revision', 'confirmado', 'rechazado'],
        default: 'pendiente',
      },
      confirmations: {
        type: Map,
        of: confirmationSchema,
        default: () => ({}),
      },
      confirmedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
      },
      confirmedAt: {
        type: Date,
      },
    },
    createdBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
    },
    autoGenerated: {
      type: Boolean,
      default: false,
    },
  },
  {
    timestamps: true,
  }
);

matchSchema.set('toJSON', { virtuals: true, flattenMaps: true });
matchSchema.set('toObject', { virtuals: true, flattenMaps: true });

matchSchema.index({ category: 1, scheduledAt: 1 });
matchSchema.index({ category: 1, status: 1 });
matchSchema.index({ status: 1, expiresAt: 1 });
module.exports = {
  Match: mongoose.model('Match', matchSchema),
};
